// Mocks generated by Mockito 5.4.4 from annotations
// in movie_app/test/repository_test/movie_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/databases/dao/genre_dao.dart' as _i3;
import 'package:movie_app/databases/dao/movie_dao.dart' as _i9;
import 'package:movie_app/databases/entities/movie_entity.dart' as _i10;
import 'package:movie_app/models/genre_model.dart' as _i7;
import 'package:movie_app/models/movie_dto_model.dart' as _i2;
import 'package:movie_app/models/trailer_model.dart' as _i8;
import 'package:movie_app/repository/genre_repository.dart' as _i11;
import 'package:movie_app/services/api/tmdb_api_client.dart' as _i4;
import 'package:movie_app/services/api_service.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMovieDTO_0 extends _i1.SmartFake implements _i2.MovieDTO {
  _FakeMovieDTO_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGenreDao_1 extends _i1.SmartFake implements _i3.GenreDao {
  _FakeGenreDao_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTmdbApiClient_2 extends _i1.SmartFake implements _i4.TmdbApiClient {
  _FakeTmdbApiClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i5.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i2.MovieDTO>> fetchUpcomingMovies() => (super.noSuchMethod(
        Invocation.method(
          #fetchUpcomingMovies,
          [],
        ),
        returnValue: _i6.Future<List<_i2.MovieDTO>>.value(<_i2.MovieDTO>[]),
      ) as _i6.Future<List<_i2.MovieDTO>>);

  @override
  _i6.Future<_i2.MovieDTO> fetchMovieDetails(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovieDetails,
          [movieId],
        ),
        returnValue: _i6.Future<_i2.MovieDTO>.value(_FakeMovieDTO_0(
          this,
          Invocation.method(
            #fetchMovieDetails,
            [movieId],
          ),
        )),
      ) as _i6.Future<_i2.MovieDTO>);

  @override
  _i6.Future<List<_i7.Genre>> fetchGenres() => (super.noSuchMethod(
        Invocation.method(
          #fetchGenres,
          [],
        ),
        returnValue: _i6.Future<List<_i7.Genre>>.value(<_i7.Genre>[]),
      ) as _i6.Future<List<_i7.Genre>>);

  @override
  _i6.Future<List<_i2.MovieDTO>> searchMovies(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [query],
        ),
        returnValue: _i6.Future<List<_i2.MovieDTO>>.value(<_i2.MovieDTO>[]),
      ) as _i6.Future<List<_i2.MovieDTO>>);

  @override
  _i6.Future<List<_i8.Trailer>> fetchMovieTrailers(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMovieTrailers,
          [movieId],
        ),
        returnValue: _i6.Future<List<_i8.Trailer>>.value(<_i8.Trailer>[]),
      ) as _i6.Future<List<_i8.Trailer>>);
}

/// A class which mocks [MovieDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDao extends _i1.Mock implements _i9.MovieDao {
  MockMovieDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i10.MovieEntity>> findAllMovies() => (super.noSuchMethod(
        Invocation.method(
          #findAllMovies,
          [],
        ),
        returnValue:
            _i6.Future<List<_i10.MovieEntity>>.value(<_i10.MovieEntity>[]),
      ) as _i6.Future<List<_i10.MovieEntity>>);

  @override
  _i6.Future<_i10.MovieEntity?> findMovieById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #findMovieById,
          [id],
        ),
        returnValue: _i6.Future<_i10.MovieEntity?>.value(),
      ) as _i6.Future<_i10.MovieEntity?>);

  @override
  _i6.Future<List<_i10.MovieEntity>> searchMovies(String? searchQuery) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovies,
          [searchQuery],
        ),
        returnValue:
            _i6.Future<List<_i10.MovieEntity>>.value(<_i10.MovieEntity>[]),
      ) as _i6.Future<List<_i10.MovieEntity>>);

  @override
  _i6.Future<void> insertMovie(_i10.MovieEntity? movie) => (super.noSuchMethod(
        Invocation.method(
          #insertMovie,
          [movie],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> insertMovies(List<_i10.MovieEntity>? movies) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertMovies,
          [movies],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateMovie(_i10.MovieEntity? movie) => (super.noSuchMethod(
        Invocation.method(
          #updateMovie,
          [movie],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteMovie(_i10.MovieEntity? movie) => (super.noSuchMethod(
        Invocation.method(
          #deleteMovie,
          [movie],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [GenreRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenreRepository extends _i1.Mock implements _i11.GenreRepository {
  MockGenreRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GenreDao get genreDao => (super.noSuchMethod(
        Invocation.getter(#genreDao),
        returnValue: _FakeGenreDao_1(
          this,
          Invocation.getter(#genreDao),
        ),
      ) as _i3.GenreDao);

  @override
  _i4.TmdbApiClient get tmdbApiClient => (super.noSuchMethod(
        Invocation.getter(#tmdbApiClient),
        returnValue: _FakeTmdbApiClient_2(
          this,
          Invocation.getter(#tmdbApiClient),
        ),
      ) as _i4.TmdbApiClient);

  @override
  _i6.Future<List<_i7.Genre>> getGenresForMovie(int? movieId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGenresForMovie,
          [movieId],
        ),
        returnValue: _i6.Future<List<_i7.Genre>>.value(<_i7.Genre>[]),
      ) as _i6.Future<List<_i7.Genre>>);
}
